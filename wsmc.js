// Generated by CoffeeScript 1.6.3
(function() {
  var WebSocketServer, argv, ids, minecraft_protocol, sids, states, userIndex, websocket_stream, wss;

  minecraft_protocol = require('minecraft-protocol');

  WebSocketServer = (require('ws')).Server;

  websocket_stream = require('websocket-stream');

  argv = (require('optimist'))["default"]('wshost', '0.0.0.0')["default"]('wsport', 1234)["default"]('mchost', 'localhost')["default"]('mcport', 25565)["default"]('prefix', 'webuser-').argv;

  console.log("WS(" + argv.wshost + ":" + argv.wsport + ") <--> MC(" + argv.mchost + ":" + argv.mcport + ")");

  states = minecraft_protocol.protocol.states;

  ids = minecraft_protocol.protocol.packetIDs.play.toClient;

  sids = minecraft_protocol.protocol.packetIDs.play.toServer;

  userIndex = 1;

  wss = new WebSocketServer({
    host: argv.wshost,
    port: argv.wsport
  });

  wss.on('connection', function(new_websocket_connection) {
    var mc, ws;
    ws = websocket_stream(new_websocket_connection);
    ws.write('welcome');
    mc = minecraft_protocol.createClient({
      host: argv.mchost,
      port: argv.mcport,
      username: argv.prefix + userIndex,
      password: null,
      parsePayload: false
    });
    userIndex += 1;
    ws.on('close', function() {
      console.log('WebSocket disconnected, closing MC');
      return mc.socket.end();
    });
    mc.on('packet', function(p) {
      return ws.write(p.raw);
    });
    mc.on('connect', function() {
      return console.log('Successfully connected to MC');
    });
    mc.on([states.PLAY, ids.chat], function(p) {});
    mc.on([states.PLAY, ids.disconnect], function(p) {
      return console.log("Kicked for " + p.reason);
    });
    return ws.on('data', function(raw) {
      console.log("websocket received " + raw.length + " bytes");
      return mc.writeRaw(raw);
    });
  });

}).call(this);
