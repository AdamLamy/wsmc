// Generated by CoffeeScript 1.6.3
(function() {
  var WebSocketServer, argv, ids, mc, sids, states, userIndex, websocket, wss;

  mc = require('minecraft-protocol');

  WebSocketServer = (require('ws')).Server;

  websocket = require('websocket-stream');

  argv = (require('optimist'))["default"]('wshost', '0.0.0.0')["default"]('wsport', 1234)["default"]('mchost', 'localhost')["default"]('mcport', 25565)["default"]('prefix', 'webuser-').argv;

  console.log("WS(" + argv.wshost + ":" + argv.wsport + ") <--> MC(" + argv.mchost + ":" + argv.mcport + ")");

  states = mc.protocol.states;

  ids = mc.protocol.packetIDs.play.toClient;

  sids = mc.protocol.packetIDs.play.toServer;

  userIndex = 1;

  wss = new WebSocketServer({
    host: argv.wshost,
    port: argv.wsport
  });

  wss.on('connection', function(ws) {
    var client, stream;
    stream = websocket(ws);
    stream.write(JSON.stringify(['wsmc-welcome', {}]));
    client = mc.createClient({
      host: argv.mchost,
      port: argv.mcport,
      username: argv.prefix + userIndex,
      password: null,
      parsePayload: true
    });
    userIndex += 1;
    stream.on('close', function() {
      console.log('WebSocket disconnected, closing MC');
      return client.socket.end();
    });
    client.on('packet', function(p) {
      var name, _ref;
      name = (_ref = mc.protocol.packetNames.play.toClient[p.id]) != null ? _ref : pi.id;
      return stream.write(JSON.stringify([name, p]));
    });
    client.on('connect', function() {
      return console.log('Successfully connected to MC');
    });
    client.on([states.PLAY, ids.chat], function(p) {});
    client.on([states.PLAY, ids.disconnect], function(p) {
      return console.log("Kicked for " + p.reason);
    });
    return stream.on('data', function(raw) {
      var array, e, id, payload;
      console.log("websocket stream received: " + raw);
      try {
        array = JSON.parse(raw);
      } catch (_error) {
        e = _error;
        console.log("bad message from websocket client, invalid JSON: " + raw);
        return;
      }
      if (array.length !== 2) {
        console.log("bad message from websocket client, invalid format: " + raw);
        return;
      }
      id = array[0];
      if (typeof id === 'string') {
        id = sids[id];
      }
      if (id == null) {
        console.log("bad message from websocket client, no such id '" + array[0] + "': " + raw);
        return;
      }
      payload = array[1];
      return client.write(id, payload);
    });
  });

}).call(this);
